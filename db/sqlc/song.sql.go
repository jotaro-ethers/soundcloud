// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: song.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createSong = `-- name: CreateSong :exec
INSERT INTO Song (title, duration, file_url, account_id, album_id, genre, tags, upload_date, play_count, like_count, repost_count, is_public)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
`

type CreateSongParams struct {
	Title       string         `json:"title"`
	Duration    time.Time      `json:"duration"`
	FileUrl     string         `json:"file_url"`
	AccountID   int32          `json:"account_id"`
	AlbumID     sql.NullInt32  `json:"album_id"`
	Genre       sql.NullString `json:"genre"`
	Tags        []string       `json:"tags"`
	UploadDate  sql.NullTime   `json:"upload_date"`
	PlayCount   sql.NullInt32  `json:"play_count"`
	LikeCount   sql.NullInt32  `json:"like_count"`
	RepostCount sql.NullInt32  `json:"repost_count"`
	IsPublic    sql.NullBool   `json:"is_public"`
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) error {
	_, err := q.exec(ctx, q.createSongStmt, createSong,
		arg.Title,
		arg.Duration,
		arg.FileUrl,
		arg.AccountID,
		arg.AlbumID,
		arg.Genre,
		pq.Array(arg.Tags),
		arg.UploadDate,
		arg.PlayCount,
		arg.LikeCount,
		arg.RepostCount,
		arg.IsPublic,
	)
	return err
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM Song WHERE song_id = $1
`

func (q *Queries) DeleteSong(ctx context.Context, songID int32) error {
	_, err := q.exec(ctx, q.deleteSongStmt, deleteSong, songID)
	return err
}

const getAllSongs = `-- name: GetAllSongs :many
SELECT song_id, title, duration, file_url, account_id, album_id, genre, tags, upload_date, play_count, like_count, repost_count, is_public FROM Song
`

func (q *Queries) GetAllSongs(ctx context.Context) ([]Song, error) {
	rows, err := q.query(ctx, q.getAllSongsStmt, getAllSongs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.SongID,
			&i.Title,
			&i.Duration,
			&i.FileUrl,
			&i.AccountID,
			&i.AlbumID,
			&i.Genre,
			pq.Array(&i.Tags),
			&i.UploadDate,
			&i.PlayCount,
			&i.LikeCount,
			&i.RepostCount,
			&i.IsPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongById = `-- name: GetSongById :one
SELECT song_id, title, duration, file_url, account_id, album_id, genre, tags, upload_date, play_count, like_count, repost_count, is_public FROM Song WHERE song_id = $1
`

func (q *Queries) GetSongById(ctx context.Context, songID int32) (Song, error) {
	row := q.queryRow(ctx, q.getSongByIdStmt, getSongById, songID)
	var i Song
	err := row.Scan(
		&i.SongID,
		&i.Title,
		&i.Duration,
		&i.FileUrl,
		&i.AccountID,
		&i.AlbumID,
		&i.Genre,
		pq.Array(&i.Tags),
		&i.UploadDate,
		&i.PlayCount,
		&i.LikeCount,
		&i.RepostCount,
		&i.IsPublic,
	)
	return i, err
}

const updateSong = `-- name: UpdateSong :exec
UPDATE Song
SET title = $1, duration = $2, file_url = $3, genre = $4, tags = $5, is_public = $6
WHERE song_id = $7
`

type UpdateSongParams struct {
	Title    string         `json:"title"`
	Duration time.Time      `json:"duration"`
	FileUrl  string         `json:"file_url"`
	Genre    sql.NullString `json:"genre"`
	Tags     []string       `json:"tags"`
	IsPublic sql.NullBool   `json:"is_public"`
	SongID   int32          `json:"song_id"`
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) error {
	_, err := q.exec(ctx, q.updateSongStmt, updateSong,
		arg.Title,
		arg.Duration,
		arg.FileUrl,
		arg.Genre,
		pq.Array(arg.Tags),
		arg.IsPublic,
		arg.SongID,
	)
	return err
}
