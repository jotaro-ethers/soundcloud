// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: repost.sql

package db

import (
	"context"
)

const deleteRepost = `-- name: DeleteRepost :exec
DELETE FROM Repost WHERE repost_id = $1
`

func (q *Queries) DeleteRepost(ctx context.Context, repostID int32) error {
	_, err := q.exec(ctx, q.deleteRepostStmt, deleteRepost, repostID)
	return err
}

const getRepostsByAccountId = `-- name: GetRepostsByAccountId :many
SELECT repost_id, account_id, song_id, reposted_at FROM Repost WHERE account_id = $1
`

func (q *Queries) GetRepostsByAccountId(ctx context.Context, accountID int32) ([]Repost, error) {
	rows, err := q.query(ctx, q.getRepostsByAccountIdStmt, getRepostsByAccountId, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repost{}
	for rows.Next() {
		var i Repost
		if err := rows.Scan(
			&i.RepostID,
			&i.AccountID,
			&i.SongID,
			&i.RepostedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRepostsBySongId = `-- name: GetRepostsBySongId :many
SELECT repost_id, account_id, song_id, reposted_at FROM Repost WHERE song_id = $1
`

func (q *Queries) GetRepostsBySongId(ctx context.Context, songID int32) ([]Repost, error) {
	rows, err := q.query(ctx, q.getRepostsBySongIdStmt, getRepostsBySongId, songID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repost{}
	for rows.Next() {
		var i Repost
		if err := rows.Scan(
			&i.RepostID,
			&i.AccountID,
			&i.SongID,
			&i.RepostedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const repostSong = `-- name: RepostSong :exec
INSERT INTO Repost (account_id, song_id)
VALUES ($1, $2)
`

type RepostSongParams struct {
	AccountID int32 `json:"account_id"`
	SongID    int32 `json:"song_id"`
}

func (q *Queries) RepostSong(ctx context.Context, arg RepostSongParams) error {
	_, err := q.exec(ctx, q.repostSongStmt, repostSong, arg.AccountID, arg.SongID)
	return err
}
