// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlist_songs.sql

package db

import (
	"context"
)

const addSongToPlaylist = `-- name: AddSongToPlaylist :exec
INSERT INTO Playlist_Songs (playlist_id, song_id)
VALUES ($1, $2)
`

type AddSongToPlaylistParams struct {
	PlaylistID int32 `json:"playlist_id"`
	SongID     int32 `json:"song_id"`
}

func (q *Queries) AddSongToPlaylist(ctx context.Context, arg AddSongToPlaylistParams) error {
	_, err := q.exec(ctx, q.addSongToPlaylistStmt, addSongToPlaylist, arg.PlaylistID, arg.SongID)
	return err
}

const getPlaylistSongs = `-- name: GetPlaylistSongs :many
SELECT playlist_id, song_id, added_at FROM Playlist_Songs WHERE playlist_id = $1
`

func (q *Queries) GetPlaylistSongs(ctx context.Context, playlistID int32) ([]PlaylistSong, error) {
	rows, err := q.query(ctx, q.getPlaylistSongsStmt, getPlaylistSongs, playlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlaylistSong{}
	for rows.Next() {
		var i PlaylistSong
		if err := rows.Scan(&i.PlaylistID, &i.SongID, &i.AddedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSongFromPlaylist = `-- name: RemoveSongFromPlaylist :exec
DELETE FROM Playlist_Songs
WHERE playlist_id = $1 AND song_id = $2
`

type RemoveSongFromPlaylistParams struct {
	PlaylistID int32 `json:"playlist_id"`
	SongID     int32 `json:"song_id"`
}

func (q *Queries) RemoveSongFromPlaylist(ctx context.Context, arg RemoveSongFromPlaylistParams) error {
	_, err := q.exec(ctx, q.removeSongFromPlaylistStmt, removeSongFromPlaylist, arg.PlaylistID, arg.SongID)
	return err
}
