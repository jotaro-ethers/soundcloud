// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscription.sql

package db

import (
	"context"
	"time"
)

const cancelSubscription = `-- name: CancelSubscription :exec
DELETE FROM Subscription WHERE subscription_id = $1
`

func (q *Queries) CancelSubscription(ctx context.Context, subscriptionID int32) error {
	_, err := q.exec(ctx, q.cancelSubscriptionStmt, cancelSubscription, subscriptionID)
	return err
}

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO Subscription (account_id, plan_type, start_date, end_date)
VALUES ($1, $2, $3, $4)
`

type CreateSubscriptionParams struct {
	AccountID int32     `json:"account_id"`
	PlanType  string    `json:"plan_type"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.exec(ctx, q.createSubscriptionStmt, createSubscription,
		arg.AccountID,
		arg.PlanType,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const getSubscriptionsByAccountId = `-- name: GetSubscriptionsByAccountId :many
SELECT subscription_id, account_id, plan_type, start_date, end_date FROM Subscription WHERE account_id = $1
`

func (q *Queries) GetSubscriptionsByAccountId(ctx context.Context, accountID int32) ([]Subscription, error) {
	rows, err := q.query(ctx, q.getSubscriptionsByAccountIdStmt, getSubscriptionsByAccountId, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscription{}
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.SubscriptionID,
			&i.AccountID,
			&i.PlanType,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
