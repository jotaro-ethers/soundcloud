// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: like.sql

package db

import (
	"context"
)

const getLikesBySongId = `-- name: GetLikesBySongId :many
SELECT account_id, song_id, liked_at FROM "Like" WHERE song_id = $1
`

func (q *Queries) GetLikesBySongId(ctx context.Context, songID int32) ([]Like, error) {
	rows, err := q.query(ctx, q.getLikesBySongIdStmt, getLikesBySongId, songID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.AccountID, &i.SongID, &i.LikedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likeSong = `-- name: LikeSong :exec
INSERT INTO "Like" (account_id, song_id)
VALUES ($1, $2)
`

type LikeSongParams struct {
	AccountID int32 `json:"account_id"`
	SongID    int32 `json:"song_id"`
}

func (q *Queries) LikeSong(ctx context.Context, arg LikeSongParams) error {
	_, err := q.exec(ctx, q.likeSongStmt, likeSong, arg.AccountID, arg.SongID)
	return err
}

const unlikeSong = `-- name: UnlikeSong :exec
DELETE FROM "Like" WHERE account_id = $1 AND song_id = $2
`

type UnlikeSongParams struct {
	AccountID int32 `json:"account_id"`
	SongID    int32 `json:"song_id"`
}

func (q *Queries) UnlikeSong(ctx context.Context, arg UnlikeSongParams) error {
	_, err := q.exec(ctx, q.unlikeSongStmt, unlikeSong, arg.AccountID, arg.SongID)
	return err
}
