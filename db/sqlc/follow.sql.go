// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follow.sql

package db

import (
	"context"
)

const followUser = `-- name: FollowUser :exec
INSERT INTO Follow (follower_id, following_id)
VALUES ($1, $2)
`

type FollowUserParams struct {
	FollowerID  int32 `json:"follower_id"`
	FollowingID int32 `json:"following_id"`
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) error {
	_, err := q.exec(ctx, q.followUserStmt, followUser, arg.FollowerID, arg.FollowingID)
	return err
}

const getFollowers = `-- name: GetFollowers :many
SELECT follower_id, following_id, followed_at FROM Follow WHERE following_id = $1
`

func (q *Queries) GetFollowers(ctx context.Context, followingID int32) ([]Follow, error) {
	rows, err := q.query(ctx, q.getFollowersStmt, getFollowers, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Follow{}
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.FollowerID, &i.FollowingID, &i.FollowedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT follower_id, following_id, followed_at FROM Follow WHERE follower_id = $1
`

func (q *Queries) GetFollowing(ctx context.Context, followerID int32) ([]Follow, error) {
	rows, err := q.query(ctx, q.getFollowingStmt, getFollowing, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Follow{}
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.FollowerID, &i.FollowingID, &i.FollowedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM Follow WHERE follower_id = $1 AND following_id = $2
`

type UnfollowUserParams struct {
	FollowerID  int32 `json:"follower_id"`
	FollowingID int32 `json:"following_id"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.exec(ctx, q.unfollowUserStmt, unfollowUser, arg.FollowerID, arg.FollowingID)
	return err
}
