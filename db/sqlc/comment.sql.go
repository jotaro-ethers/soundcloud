// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO Comment (account_id, song_id, content)
VALUES ($1, $2, $3)
`

type CreateCommentParams struct {
	AccountID int32  `json:"account_id"`
	SongID    int32  `json:"song_id"`
	Content   string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.exec(ctx, q.createCommentStmt, createComment, arg.AccountID, arg.SongID, arg.Content)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM Comment WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int32) error {
	_, err := q.exec(ctx, q.deleteCommentStmt, deleteComment, commentID)
	return err
}

const getCommentsBySongId = `-- name: GetCommentsBySongId :many
SELECT comment_id, account_id, song_id, content, created_at FROM Comment WHERE song_id = $1
`

func (q *Queries) GetCommentsBySongId(ctx context.Context, songID int32) ([]Comment, error) {
	rows, err := q.query(ctx, q.getCommentsBySongIdStmt, getCommentsBySongId, songID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.AccountID,
			&i.SongID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
