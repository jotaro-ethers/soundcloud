// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addSongToPlaylistStmt, err = db.PrepareContext(ctx, addSongToPlaylist); err != nil {
		return nil, fmt.Errorf("error preparing query AddSongToPlaylist: %w", err)
	}
	if q.addToListenHistoryStmt, err = db.PrepareContext(ctx, addToListenHistory); err != nil {
		return nil, fmt.Errorf("error preparing query AddToListenHistory: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createCommentStmt, err = db.PrepareContext(ctx, createComment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateComment: %w", err)
	}
	if q.createPlaylistStmt, err = db.PrepareContext(ctx, createPlaylist); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlaylist: %w", err)
	}
	if q.createReportStmt, err = db.PrepareContext(ctx, createReport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReport: %w", err)
	}
	if q.createSongStmt, err = db.PrepareContext(ctx, createSong); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSong: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteCommentStmt, err = db.PrepareContext(ctx, deleteComment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteComment: %w", err)
	}
	if q.deletePlaylistStmt, err = db.PrepareContext(ctx, deletePlaylist); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePlaylist: %w", err)
	}
	if q.deleteReportStmt, err = db.PrepareContext(ctx, deleteReport); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReport: %w", err)
	}
	if q.deleteSongStmt, err = db.PrepareContext(ctx, deleteSong); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSong: %w", err)
	}
	if q.followAccountStmt, err = db.PrepareContext(ctx, followAccount); err != nil {
		return nil, fmt.Errorf("error preparing query FollowAccount: %w", err)
	}
	if q.getAccountByIdStmt, err = db.PrepareContext(ctx, getAccountById); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountById: %w", err)
	}
	if q.getCommentsBySongIdStmt, err = db.PrepareContext(ctx, getCommentsBySongId); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommentsBySongId: %w", err)
	}
	if q.getFollowersStmt, err = db.PrepareContext(ctx, getFollowers); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowers: %w", err)
	}
	if q.getFollowingStmt, err = db.PrepareContext(ctx, getFollowing); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowing: %w", err)
	}
	if q.getLikesBySongIdStmt, err = db.PrepareContext(ctx, getLikesBySongId); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesBySongId: %w", err)
	}
	if q.getListenHistoryByAccountIdStmt, err = db.PrepareContext(ctx, getListenHistoryByAccountId); err != nil {
		return nil, fmt.Errorf("error preparing query GetListenHistoryByAccountId: %w", err)
	}
	if q.getPlaylistByIdStmt, err = db.PrepareContext(ctx, getPlaylistById); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlaylistById: %w", err)
	}
	if q.getPlaylistSongsStmt, err = db.PrepareContext(ctx, getPlaylistSongs); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlaylistSongs: %w", err)
	}
	if q.getReportsBySongIdStmt, err = db.PrepareContext(ctx, getReportsBySongId); err != nil {
		return nil, fmt.Errorf("error preparing query GetReportsBySongId: %w", err)
	}
	if q.getSongByIdStmt, err = db.PrepareContext(ctx, getSongById); err != nil {
		return nil, fmt.Errorf("error preparing query GetSongById: %w", err)
	}
	if q.likeSongStmt, err = db.PrepareContext(ctx, likeSong); err != nil {
		return nil, fmt.Errorf("error preparing query LikeSong: %w", err)
	}
	if q.removeSongFromPlaylistStmt, err = db.PrepareContext(ctx, removeSongFromPlaylist); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveSongFromPlaylist: %w", err)
	}
	if q.unfollowAccountStmt, err = db.PrepareContext(ctx, unfollowAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UnfollowAccount: %w", err)
	}
	if q.unlikeSongStmt, err = db.PrepareContext(ctx, unlikeSong); err != nil {
		return nil, fmt.Errorf("error preparing query UnlikeSong: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updatePlaylistStmt, err = db.PrepareContext(ctx, updatePlaylist); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePlaylist: %w", err)
	}
	if q.updateSongStmt, err = db.PrepareContext(ctx, updateSong); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSong: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addSongToPlaylistStmt != nil {
		if cerr := q.addSongToPlaylistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addSongToPlaylistStmt: %w", cerr)
		}
	}
	if q.addToListenHistoryStmt != nil {
		if cerr := q.addToListenHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addToListenHistoryStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createCommentStmt != nil {
		if cerr := q.createCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCommentStmt: %w", cerr)
		}
	}
	if q.createPlaylistStmt != nil {
		if cerr := q.createPlaylistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlaylistStmt: %w", cerr)
		}
	}
	if q.createReportStmt != nil {
		if cerr := q.createReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReportStmt: %w", cerr)
		}
	}
	if q.createSongStmt != nil {
		if cerr := q.createSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSongStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteCommentStmt != nil {
		if cerr := q.deleteCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommentStmt: %w", cerr)
		}
	}
	if q.deletePlaylistStmt != nil {
		if cerr := q.deletePlaylistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePlaylistStmt: %w", cerr)
		}
	}
	if q.deleteReportStmt != nil {
		if cerr := q.deleteReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReportStmt: %w", cerr)
		}
	}
	if q.deleteSongStmt != nil {
		if cerr := q.deleteSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSongStmt: %w", cerr)
		}
	}
	if q.followAccountStmt != nil {
		if cerr := q.followAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing followAccountStmt: %w", cerr)
		}
	}
	if q.getAccountByIdStmt != nil {
		if cerr := q.getAccountByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIdStmt: %w", cerr)
		}
	}
	if q.getCommentsBySongIdStmt != nil {
		if cerr := q.getCommentsBySongIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommentsBySongIdStmt: %w", cerr)
		}
	}
	if q.getFollowersStmt != nil {
		if cerr := q.getFollowersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowersStmt: %w", cerr)
		}
	}
	if q.getFollowingStmt != nil {
		if cerr := q.getFollowingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowingStmt: %w", cerr)
		}
	}
	if q.getLikesBySongIdStmt != nil {
		if cerr := q.getLikesBySongIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesBySongIdStmt: %w", cerr)
		}
	}
	if q.getListenHistoryByAccountIdStmt != nil {
		if cerr := q.getListenHistoryByAccountIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListenHistoryByAccountIdStmt: %w", cerr)
		}
	}
	if q.getPlaylistByIdStmt != nil {
		if cerr := q.getPlaylistByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlaylistByIdStmt: %w", cerr)
		}
	}
	if q.getPlaylistSongsStmt != nil {
		if cerr := q.getPlaylistSongsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlaylistSongsStmt: %w", cerr)
		}
	}
	if q.getReportsBySongIdStmt != nil {
		if cerr := q.getReportsBySongIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReportsBySongIdStmt: %w", cerr)
		}
	}
	if q.getSongByIdStmt != nil {
		if cerr := q.getSongByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSongByIdStmt: %w", cerr)
		}
	}
	if q.likeSongStmt != nil {
		if cerr := q.likeSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing likeSongStmt: %w", cerr)
		}
	}
	if q.removeSongFromPlaylistStmt != nil {
		if cerr := q.removeSongFromPlaylistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeSongFromPlaylistStmt: %w", cerr)
		}
	}
	if q.unfollowAccountStmt != nil {
		if cerr := q.unfollowAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unfollowAccountStmt: %w", cerr)
		}
	}
	if q.unlikeSongStmt != nil {
		if cerr := q.unlikeSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unlikeSongStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updatePlaylistStmt != nil {
		if cerr := q.updatePlaylistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePlaylistStmt: %w", cerr)
		}
	}
	if q.updateSongStmt != nil {
		if cerr := q.updateSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSongStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	addSongToPlaylistStmt           *sql.Stmt
	addToListenHistoryStmt          *sql.Stmt
	createAccountStmt               *sql.Stmt
	createCommentStmt               *sql.Stmt
	createPlaylistStmt              *sql.Stmt
	createReportStmt                *sql.Stmt
	createSongStmt                  *sql.Stmt
	deleteAccountStmt               *sql.Stmt
	deleteCommentStmt               *sql.Stmt
	deletePlaylistStmt              *sql.Stmt
	deleteReportStmt                *sql.Stmt
	deleteSongStmt                  *sql.Stmt
	followAccountStmt               *sql.Stmt
	getAccountByIdStmt              *sql.Stmt
	getCommentsBySongIdStmt         *sql.Stmt
	getFollowersStmt                *sql.Stmt
	getFollowingStmt                *sql.Stmt
	getLikesBySongIdStmt            *sql.Stmt
	getListenHistoryByAccountIdStmt *sql.Stmt
	getPlaylistByIdStmt             *sql.Stmt
	getPlaylistSongsStmt            *sql.Stmt
	getReportsBySongIdStmt          *sql.Stmt
	getSongByIdStmt                 *sql.Stmt
	likeSongStmt                    *sql.Stmt
	removeSongFromPlaylistStmt      *sql.Stmt
	unfollowAccountStmt             *sql.Stmt
	unlikeSongStmt                  *sql.Stmt
	updateAccountStmt               *sql.Stmt
	updatePlaylistStmt              *sql.Stmt
	updateSongStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		addSongToPlaylistStmt:           q.addSongToPlaylistStmt,
		addToListenHistoryStmt:          q.addToListenHistoryStmt,
		createAccountStmt:               q.createAccountStmt,
		createCommentStmt:               q.createCommentStmt,
		createPlaylistStmt:              q.createPlaylistStmt,
		createReportStmt:                q.createReportStmt,
		createSongStmt:                  q.createSongStmt,
		deleteAccountStmt:               q.deleteAccountStmt,
		deleteCommentStmt:               q.deleteCommentStmt,
		deletePlaylistStmt:              q.deletePlaylistStmt,
		deleteReportStmt:                q.deleteReportStmt,
		deleteSongStmt:                  q.deleteSongStmt,
		followAccountStmt:               q.followAccountStmt,
		getAccountByIdStmt:              q.getAccountByIdStmt,
		getCommentsBySongIdStmt:         q.getCommentsBySongIdStmt,
		getFollowersStmt:                q.getFollowersStmt,
		getFollowingStmt:                q.getFollowingStmt,
		getLikesBySongIdStmt:            q.getLikesBySongIdStmt,
		getListenHistoryByAccountIdStmt: q.getListenHistoryByAccountIdStmt,
		getPlaylistByIdStmt:             q.getPlaylistByIdStmt,
		getPlaylistSongsStmt:            q.getPlaylistSongsStmt,
		getReportsBySongIdStmt:          q.getReportsBySongIdStmt,
		getSongByIdStmt:                 q.getSongByIdStmt,
		likeSongStmt:                    q.likeSongStmt,
		removeSongFromPlaylistStmt:      q.removeSongFromPlaylistStmt,
		unfollowAccountStmt:             q.unfollowAccountStmt,
		unlikeSongStmt:                  q.unlikeSongStmt,
		updateAccountStmt:               q.updateAccountStmt,
		updatePlaylistStmt:              q.updatePlaylistStmt,
		updateSongStmt:                  q.updateSongStmt,
	}
}
